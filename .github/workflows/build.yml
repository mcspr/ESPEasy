name: Build

on:
  push:
    branches: [ghactions-order]
    tags-ignore: '**'
  pull_request:
    branches: [mega]

jobs:
  dummy:
    runs-on: ubuntu-20.04
    steps:
      - run: echo doing nothing

  generate-matrix:
    if: failure()
    needs: dummy
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - id: set-matrix
        run: |
          pip install platformio
          python tools/ci/generate-matrix.py

  build:
    if: failure()
    needs: generate-matrix
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - uses: actions/cache@v2
        if: ${{ contains(matrix.env, 'esp32') }}
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-esp32-${{ hashFiles('platformio*.ini') }}
      - uses: actions/cache@v2
        if: ${{ contains(matrix.env, 'esp8266') }}
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-esp8266-${{ hashFiles('platformio*.ini') }}
      - name: Dependencies
        run: |
          sudo apt install binutils
          pip install -r requirements.txt
          platformio update
      - name: Build and archive
        id: build-and-archive
        env:
          CHIP: ${{ matrix.chip }}
          ENV: ${{ matrix.env }}
        run: |
          python tools/ci/build-and-archive.py
      - uses: actions/upload-artifact@v2
        with:
          name: Binaries
          path: ESPEasy_${{ matrix.env }}.zip
          if-no-files-found: ignore
